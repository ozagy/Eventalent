<% content_for :css do %>
<style>
body {
	background-color: #000000;
	margin: 0px;
	overflow: hidden;
}

a {
	color:#0078ff;
}
.event_title{
	color:#ccc;
	position:fixed;
	left: 10px;
	top:5px;
	font-family: "gotham_boldregular";
	font-size:13px;
	line-height:150%;
}
.title{
	height:30px;
	margin-right: 20px
}
.name_tag{
	position:absolute;
	left: 0px;
	top: 0px;
	padding: 8px 5px 5px 5px;
	width: 180px;
	height: 47px;
	background-color:rgba(255,255,255,1);
	border-radius: 2px;
	-moz-border-radius:2px;
	-webkit-border-radius:2px;
	font-family: "gotham_boldregular";
	display:none;
}
.thumbnail{
	width:50px;
	height:50px;
	margin-top:-3px;
	float:left;
	border-radius: 2px;
	-moz-border-radius:2px;
	-webkit-border-radius:2px;
	margin-right:5px
}
.name{
	color:#3B5998 ;
	font-size:14px;
}
.sex, .gender{
	color:#999;
	font-size:11px;
}
.friend{
	color:#777;
	font-size:12px;
}
.icon-outer-div{
	margin-top: 100px;
	position:fixed;
	left: 10px;
	bottom:5px;
}
.icon-div{
	height:50px;
	width:50px;
	margin: 0 0 20px 10px;
}
.icon-div:hover{
	cursor:pointer;
}
.icon-div:not(.active):hover .icon{
	opacity: 0.4;
}
.icon{
	width:50px;
	opacity: 0.7;
}
.active .icon{
	opacity: 1;
}
.detail-div{
	background-color: rgba(50,50,50,0.6);
	position:absolute;
	right:0px;
	top:0px;
	width:300px;
	height:100%;
}
.detail-tab{
	width:30px;
	opacity:0.6;
	position:absolute;
	left:-30px;
	top:0px;
}
.detail-tab:hover{
	cursor:pointer;
}
.tableview{
	width:100%;
	height:100%;
	overflow-x:hidden;
	overflow-y:scroll;
	position:relative;
	color:#fff;
}
.tablerows{
	width:100%;
	position:relative;
	float:left;
	margin-top:3px;
}
.group-div{
	padding:0px;
}
.list{
	margin:0;
    padding:0px 0 0;
}
.list > li {
  display:block;
  background-color:rgba(100,100,100,0.5);
  padding:10px;
  margin:2px 0 2px 0;
  font-family: "gotham_boldregular";
  position:relative;
  min-height: 50px;
}
.list > li:hover{
	cursor:pointer;
	background-color: rgba(200,200,200,0.5);
}
.thumb{
	display:inline;
	float:left;
	height:50px;
	width:50px;
	margin-right:6px
}
.thumb img{
	border-radius: 2px;
	-moz-border-radius:2px;
	-webkit-border-radius:2px;
}
.listname{
	color:#eee;
	font-size:14px;
}
.color-bar{
	width:10px;
	position:absolute;
	right:0px;
	top:0px;
	height:100%;
}
.rank{
	position:absolute;
	right:13px;
	bottom:-12px;
	color:#ddd;
}
.eig{
	position:absolute;
	right:13px;
	top: -10px;
	color:#ddd;
}
.sub-icon-div{
	display:none;
	position:absolute;
	left:65px;
	top:140px;
}
.slider-div{
	position:absolute;
	height:330px;
	width:50px;
	left:65px;
	top:0px;
	background-color:rgba(204, 204, 204, 0.7);
	border-radius: 5px;
	-moz-border-radius:5px;
	-webkit-border-radius:5px;
	margin: 0 0 20px 10px;
	display:none;
}
.slide-track{
	width:4px;
	height:300px;
	margin:15px 23px;
	background-color:#ddd;
}
#slide-bar{
	width: 20px;
	height: 20px;
	border-radius: 10px;
	-moz-border-radius: 10px;
	-webkit-border-radius: 10px;
	position:absolute;
	background-color:rgba(200,200,200,1);
	-moz-box-shadow: 2px 1px 3px #333, inset -2px -1px 2px #aaa;
	-webkit-box-shadow: 2px 1px 3px #333, inset -2px -1px 2px #aaa;
	box-shadow: 2px 1px 3px #333, inset -2px -1px 2px #aaa;
	-webkit-transition: background-color 0.3s ease-in-out;
	-moz-transition: background-color 0.3s ease-in-out; 
	-o-transition: background-color 0.3s ease-in-out; 
	-ms-transition: background-color 0.3s ease-in-out;
	border: 0px;
	margin-left: -3px;
}
.slide-scale{
	position:absolute;
	left:10px;
	top:15px;
}
.scale-dash{
	height:2px;
	width:10px;
	margin-bottom:73px;
	background-color:#ddd;
}
</style>
<% end %>

<% if @error.nil? %>
		<script>

			var SCREEN_WIDTH = window.innerWidth,
			SCREEN_HEIGHT = window.innerHeight,

			mouseX = 0, mouseY = 0,

			windowHalfX = window.innerWidth / 2,
			windowHalfY = window.innerHeight / 2,

			SEPARATION = 200,
			AMOUNTX = 10,
			AMOUNTY = 10,

			camera, scene, renderer, controls, stats;
			//var canvas1, texture1, sprite1, context1;
			var projector, INTERSECTED;

			init();
			animate();

			function init() {

				var container, separation = 100, amountX = 50, amountY = 50,
				particles, particle;

				container = document.createElement('div');
				document.body.appendChild(container);

				camera = new THREE.PerspectiveCamera( 75, SCREEN_WIDTH / SCREEN_HEIGHT, 1, 10000 );
				camera.position.z = 1000;

				scene = new THREE.Scene();

				if ( Detector.webgl )
					renderer = new THREE.WebGLRenderer( {antialias:true} );
				else
					renderer = new THREE.CanvasRenderer(); 
				renderer.setSize(SCREEN_WIDTH, SCREEN_HEIGHT);

				controls = new THREE.OrbitControls( camera, renderer.domElement );
				stats = new Stats();
				stats.domElement.style.position = 'absolute';
				stats.domElement.style.bottom = '0px';
				stats.domElement.style.zIndex = 100;
				
				container.appendChild(renderer.domElement);
				
				// LIGHT
				var light = new THREE.PointLight(0xffffff);
				light.position.set(0,500,0);
				scene.add(light);
				// particles

				// var PI2 = Math.PI * 2;
				// var material = new THREE.ParticleCanvasMaterial( {
// 
					// color: 0xffffff,
					// program: function ( context ) {
// 
						// context.beginPath();
						// context.arc( 0, 0, 1, 0, PI2, true );
						// context.closePath();
						// context.fill();
// 
					// }
// 
				// } );
// 				
				// var geometry = new THREE.Geometry();
// 
				// for ( i = 0; i < 1000; i ++ ) {
// 
					// var vertex = new THREE.Vector3();
					// vertex.x = Math.random() * 2000 - 1000;
					// vertex.y = Math.random() * 2000 - 1000;
					// vertex.z = Math.random() * 2000 - 1000;
// 
					// geometry.vertices.push( vertex );
// 
				// }
				// particle = new THREE.ParticleSystem( geometry, material );
				// scene.add( particle );

				// lines
				var vector = {};
				var vector2 = {};
				var geometry = {}
				var line = {};
				lines = [];
				<% @connections.each do |c| %>
					geometry = new THREE.Geometry();

					vector = new THREE.Vector3( <%= @pos[c[:uid1]][:x]%>, <%= @pos[c[:uid1]][:y]%>, <%= @pos[c[:uid1]][:z]%> );
					geometry.vertices.push( vector );

					vector2 = new THREE.Vector3( <%= @pos[c[:uid2]][:x]%>, <%= @pos[c[:uid2]][:y]%>, <%= @pos[c[:uid2]][:z]%> );
					geometry.vertices.push( vector2 );
					var opacity = Math.random()*0.1+0.1;
					line = new THREE.Line( geometry, new THREE.LineBasicMaterial( { color: 0xffffff,transparent: true, opacity: opacity } ) );
					line.uid1 = <%= c[:uid1] %>;
					line.uid2 = <%= c[:uid2] %>;
					line.default_opacity = opacity;
					scene.add( line );
					lines.push( line );
				<% end %>
				// sphere
				var sphere = {}
				spheres = {};
				spheres_arr = [];
				var spriteMaterial = {}
				var uid = 0;
				canvas = {};
				context = {};
				texture = {};
				sprite = {};
				
				<% @members.each do |m| %>
				  sphere = new THREE.Mesh(new THREE.SphereGeometry(6, 8, 8), new THREE.MeshBasicMaterial({ color: 0xffffff,side: THREE.BackSide,transparent: true, opacity: 0.6 }));
			      sphere.position.x = <%= @pos[m['uid']][:x] %>
			      sphere.position.y = <%= @pos[m['uid']][:y] %>
			      sphere.position.z = <%= @pos[m['uid']][:z] %>
			      sphere.name = '<%= m['name'] %>';
			      sphere.sex = '<%= m['sex'] %>';
			      sphere.thumbnail = '<%= @thumbnails[m['uid']] %>';
			      sphere.me = <% if m['uid'].to_i == @current_user.uid.to_i %> true <% else %> false <% end %>;
			      sphere.friend = <% if @friends.include? m['uid'].to_i %> true <% else %> false <% end %>;
			      sphere.eig = <%= @eig[m['uid']] %>;
			      sphere.deg = <%= @deg[m['uid']] %>;
			      sphere.clu = <%= @clu[m['uid']] %>;
			      sphere.dis = <% if @dis[m['uid']] %>
			      					<%= @dis[m['uid']] %>
			      				<% else %>
			      					'Unknown'
			      				<% end %>;
			      sphere.uid = <%= m['uid'] %>;
			      spheres[<%= m['uid'] %>] = sphere;
			      spheres_arr.push(sphere);
			      scene.add(sphere);
			      
			      var uid =<%= m['uid'] %>;
					// create a canvas element
			      canvas[uid] = document.createElement('canvas');
				  context[uid] = canvas[uid].getContext('2d');
				  context[uid].font = "Bold 20px Arial";
				  
				  var message = '<%= m['name'] %>';
				  var metrics = context[uid].measureText(message);
				  var width = metrics.width;
				  context[uid].fillStyle = "rgba(255,255,255,0.65)"; // text color
				  context[uid].fillText( message, 0,20 );
				    
					// canvas contents will be used for a texture
					texture[uid] = new THREE.Texture(canvas[uid]) 
					texture[uid].needsUpdate = true;
					
					////////////////////////////////////////
					
					spriteMaterial = new THREE.SpriteMaterial( { map: texture[uid], useScreenCoordinates: true, alignment: THREE.SpriteAlignment.topLeft, transparent:true } );
					sprite[uid] = new THREE.Sprite( spriteMaterial );
					sprite[uid].scale.set(200,100,1);
					pos_2d = toScreenXY(sphere.position, camera);
					sprite[uid].position.set( pos_2d.x, pos_2d.y, 0 );
					sprite[uid].sphere = sphere;
					sphere.sprite = sprite[uid];
					scene.add( sprite[uid] );	
				
					//////////////////////////////////////////
			    <% end %>
			    
			    projector = new THREE.Projector();
			    /////// draw text on canvas /////////

				// create a canvas element
				// canvas1 = document.createElement('canvas');
				// context1 = canvas1.getContext('2d');
				// context1.font = "Bold 20px Arial";
				// context1.fillStyle = "rgba(255,255,255,0.95)";
			    // context1.fillText('Hello, world!', 0, 20);
// 			    
				// // canvas contents will be used for a texture
				// texture1 = new THREE.Texture(canvas1) 
				// texture1.needsUpdate = true;
// 				
				// ////////////////////////////////////////
// 				
				// var spriteMaterial = new THREE.SpriteMaterial( { map: texture1, useScreenCoordinates: true, alignment: THREE.SpriteAlignment.topLeft } );
// 				
				// sprite1 = new THREE.Sprite( spriteMaterial );
				// sprite1.scale.set(200,100,1.0);
				// sprite1.position.set( 50, 50, 0 );
				// scene.add( sprite1 );	
// 			
				// //////////////////////////////////////////
				
				

				document.addEventListener( 'mousemove', onDocumentMouseMove, false );
				document.addEventListener( 'touchstart', onDocumentTouchStart, false );
				document.addEventListener( 'touchmove', onDocumentTouchMove, false );
				document.addEventListener("mousedown", onDocumentmouseClick, false);

			}

			//

			function onDocumentMouseMove(event) {
				
				//sprite1.position.set( event.clientX + 10 , event.clientY - 20, 0 );

				mouseX = event.clientX - windowHalfX;
				mouseY = event.clientY - windowHalfY;
			}

			function onDocumentTouchStart( event ) {

				if ( event.touches.length > 1 ) {

					event.preventDefault();

					mouseX = event.touches[ 0 ].pageX - windowHalfX;
					mouseY = event.touches[ 0 ].pageY - windowHalfY;

				}

			}

			function onDocumentTouchMove( event ) {

				if ( event.touches.length == 1 ) {

					event.preventDefault();

					mouseX = event.touches[ 0 ].pageX - windowHalfX;
					mouseY = event.touches[ 0 ].pageY - windowHalfY;

				}

			}
			function onDocumentmouseClick( event ){

				var vector = new THREE.Vector3( (event.clientX/SCREEN_WIDTH) * 2 - 1, -(event.clientY/SCREEN_HEIGHT) * 2 + 1, 1 );
				projector.unprojectVector( vector, camera );
				var ray = new THREE.Raycaster( camera.position, vector.sub( camera.position ).normalize() );
			    
				// create an array containing all objects in the scene with which the ray intersects
				var intersects = ray.intersectObjects( spheres );
				console.log(intersects[0].object);
			}

			//

			function animate() {

				requestAnimationFrame( animate );
				render();
				update();

			}
			
			function update(){

				for ( var key in sprite ){
					sphere_p = sprite[key].sphere.position;
					var pos_2d = toScreenXY( sphere_p, camera );
					sprite[key].position.set( pos_2d.x + 10, pos_2d.y - 10, 0 );
				}
				// create a Ray with origin at the mouse position
				var vector = new THREE.Vector3( ((mouseX+windowHalfX)/SCREEN_WIDTH) * 2 - 1, -((mouseY+windowHalfY)/SCREEN_HEIGHT) * 2 + 1, 1 );
				projector.unprojectVector( vector, camera );
				var ray = new THREE.Raycaster( camera.position, vector.sub( camera.position ).normalize() );
			    
				// create an array containing all objects in the scene with which the ray intersects
				var intersects = ray.intersectObjects( spheres_arr );
			
				// INTERSECTED = the object in the scene currently closest to the camera 
				//		and intersected by the Ray projected from the mouse position 	
				
				// if there is one (or more) intersections
				if ( intersects.length > 0 )
				{
					// if the closest object intersected is not the currently stored intersection object
					if ( intersects[ 0 ].object != INTERSECTED ) 
					{
					    // restore previous intersection object (if it exists) to its original color
						if ( INTERSECTED ) 
							INTERSECTED.material.color.setHex( INTERSECTED.currentHex );
						// store reference to closest object as current intersection object
						INTERSECTED = intersects[ 0 ].object;
						// store color of closest object (for later restoration)
						INTERSECTED.currentHex = INTERSECTED.material.color.getHex();
						// set a new color for closest object
						INTERSECTED.material.color.setHex( 0x0090ff );
						INTERSECTED.scale.set( 2, 2, 2 );
						// update text, if it has a "name" field.
						if ( intersects[ 0 ].object.name )
						{
						    var obj = intersects[ 0 ].object;
							showNameTag(obj, 200);
						}
						
					}
				} 
				else // there are no intersections
				{
					// restore previous intersection object (if it exists) to its original color
					if ( INTERSECTED ) {
						INTERSECTED.material.color.setHex( INTERSECTED.currentHex );
						INTERSECTED.scale.set( 0.5, 0.5, 0.5 );
						hideNameTag(200);
					}
					// remove previous intersection object reference
					//     by setting current intersection object to "nothing"
					INTERSECTED = null;
				}

				controls.update();
				stats.update();
			}

			function render() {

				renderer.render( scene, camera );

			}
			
			function toScreenXY( position, camera ) {
	            var pos = position.clone();
	            projScreenMat = new THREE.Matrix4();
	            projScreenMat.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
	            pos.applyProjection( projScreenMat );
	            
	            //var div = document.getElementById('my_canvas');
	
	            return { x: ( pos.x + 1 ) * SCREEN_WIDTH/2,
	                 y: ( - pos.y + 1) * SCREEN_HEIGHT/2 };

        	}
        	
        	function showNameTag( obj , speed ){
        		var sphere_p = obj.position;
				var pos_2d = toScreenXY( sphere_p, camera );
        		
        		$('.name').html(obj.name);
        		$('.sex').html(obj.sex);
        		$('.thumbnail').attr('src',obj.thumbnail);
        		if (obj.me)
        			$('.friend').html('Here I am!');
        		else if (obj.friend)
        			$('.friend').html('Is friend');
        		else
        			$('.friend').html('Not friend');
        		$('.name_tag').css('left', pos_2d.x  - 30 + 'px'); 
        		$('.name_tag').css('top', pos_2d.y  - 70 + 'px');  	 		
        		$('.name_tag').fadeIn(speed);  		
        	}
        	function hideNameTag( speed ){
        		$('.name_tag').fadeOut(speed);       
        	}
			
			$(function(){
				$('.toggle').click(function(){
					if ($(this).hasClass('active'))
					{
						$('.toggle').removeClass('active');
						resetScene();
					}
					else {
						$('.toggle').removeClass('active');
						$(this).addClass('active');
						switch ($(this).attr('id'))
						{
							case 'gender':
								$('.slider-div').fadeOut();
								$('.sub-icon-div').fadeOut();
								showGender();
								break;
							case 'distance':
								$('.slider-div').fadeOut();
								$('.sub-icon-div').fadeOut();
								showDistance();
								break;
							case 'rank':
								$('.slider-div').fadeOut();
								showRank();
								break;
							case 'cluster':
								$('.sub-icon-div').fadeOut();
								showCluster();
								break;
						}
					}
					
				});
				$('.sub-toggle').click(function(){
					if (!$(this).hasClass('active'))
					{
						$('.sub-toggle').removeClass('active');
						$(this).addClass('active');
						showRank();
					}
				})
				$('.detail-tab').click(function(){
					if ($('.detail-div').css('right') == '-300px')
						showDetails();
					else
						hideDetails();
				});
				$('#slide-track').slider({ orientation: "vertical", step: 1, value: 0, min:0, max: 4})	
				$("#slide-track" ).find("a").attr('id', 'slide-bar');
				$("#slide-track" ).slider({
					change: function(e){
						var level = $("#slide-track" ).slider('value');
						showCluster(level);
					}
				});
				appendList({'All':spheres});
			});
			
			function showDetails()
			{
				$('.detail-div').css('right', '0px');
			}
			function hideDetails()
			{
				$('.detail-div').css('right', '-300px');
			}
			
			function resetScene()
			{
				appendList({'All':spheres});
				$('.slider-div').fadeOut();
				$('.sub-icon-div').fadeOut();
			}
			
			function showGender()
			{
				var groups = {'Male': [], 'Female': []};
				$.each(spheres, function(i, v){
					if (v.sex == 'male')
					{
						groups['Male'].push(v);
					}
					else
					{
						groups['Female'].push(v);
					}
				});
				appendList(groups);
			}
			
			function showDistance()
			{
				var groups = {'Me':[]};
				spheres_arr.sort(function(a, b) {
		    		a = a.dis;
				    b = b.dis;
				    return a < b ? -1 : (a > b ? 1 : 0);
				});
				$.each(spheres_arr, function(i,v){
					if (v.dis == 0)
						groups['Me'].push(v);
					else if (v.dis == 1)
					{
						if (!groups['Friends'])
							groups['Friends'] = [];
						groups['Friends'].push(v);
					}
					else
					{
						if (!groups['Distance '+v.dis])
							groups['Distance '+v.dis] = [];
						groups['Distance '+v.dis].push(v);
					}	
				});
				appendList(groups);
			}
			
			function showRank()
			{
				$('#sub-rank').fadeIn();
				var type = $('#sub-rank').find('.active').attr('id');
				var groups = {};
				if (type == 'eig')
				{
					spheres_arr.sort(function(a, b) {
			    		a = a.eig;
					    b = b.eig;
					    return a > b ? -1 : (a < b ? 1 : 0);
					});
					var current = Infinity;
					var rank = 0;
					var count = 0;
					$.each(spheres_arr, function(i, v){
						if (v.eig < current)
						{
							rank = count;
							v.rank = ++rank;
							v.rank_value = v.eig;
							current = v.eig;
						}
						else if( current - v.eig < 0.001 )
						{
							v.rank = rank;
							v.rank_value = v.eig;
							current = v.eig;
						}
						count++;
					})
				}
				else if (type == 'degree')
				{
					spheres_arr.sort(function(a, b) {
			    		a = a.deg;
					    b = b.deg;
					    return a > b ? -1 : (a < b ? 1 : 0);
					});
					var current = Infinity;
					var rank = 0;
					var count = 0;
					$.each(spheres_arr, function(i, v){
						if (v.deg < current)
						{
							rank = count;
							v.rank = ++rank;
							v.rank_value = v.deg;
							current = v.deg;
						}
						else if( current - v.deg < 0.001 )
						{
							v.rank = rank;
							v.rank_value = v.deg;
							current = v.deg;
						}
						count++;
					})
				}
				$.each(spheres_arr, function(i,v){
					if (!groups['Rank '+v.rank])
						groups['Rank '+v.rank] = [];
					groups['Rank '+v.rank].push(v);
				});
				appendList(groups);
			}
			
			function showCluster()
			{
				$('.slider-div').fadeIn();
				var level = $('.slide-track').slider('value');
				var groups = {};
				spheres_arr.sort(function(a, b) {
		    		a = a.clu[level];
				    b = b.clu[level];
				    return a < b ? -1 : (a > b ? 1 : 0);
				});
				$.each(spheres_arr, function(i, v){
					var group = v.clu[level];
					if (group == 0) group = 'Isolated'
					if (!groups['Group '+group])
						groups['Group '+group] = [];
					groups['Group '+group].push(v);
				});
				appendList(groups);
			}
			
			function appendList(groups)
			{
				$('.tableview').html('');
				var count = 0;
				$.each(groups, function(k,g){
					count++;
					var color = getColor(k);
					if (k.split(' ')[0] == 'Rank' )
						$('.tableview').append('<h3 class="group-title open" group="'+ k.replace(' ','_') +'" style="background-color:#'+ color +'; display:none">'+ k +' ('+ Object.size(g) +')</h3><div class="group-div" id="' +k+'"><ul class="list"></ul></div>');
					else
						$('.tableview').append('<h3 class="group-title" group="'+ k.replace(' ','_') +'" style="background-color:#'+ color +'">'+ k +' ('+ Object.size(g) +')</h3><div class="group-div" id="' +k+'"><ul class="list"></ul></div>');
					valueNames = ['thumb', 'listname', 'gender', 'uid' ];
					item = '<li class="trans items"><span style="display:none" class="uid"></span><div class="color-bar" style="background-color:#'+ color +'"></div><div class="thumb"></div><span class="listname"></span></br><span class="gender"></span>';
					item_close = '</li>';
					if (k.split(' ')[0] == 'Rank') {
						valueNames.push('rank');
						valueNames.push('eig');
						item += '<h4 class="rank"></h4><h4 class="eig"></h4>';
					}
					var options = {
						valueNames: valueNames,
						item: item+item_close
					};
					
					var values = [];
					$.each(g, function(i, v){
						if (k == 'All' || k == 'Me')
						{
							v.material.color.setHex( 0xffffff );
							v.sprite.material.color.setHex( 0xffffff );
						}
						else
						{
							v.material.color.setHex( parseInt('0x'+color,16) );
							v.sprite.material.color.setHex( parseInt('0x'+color,16) );
						}
						if (k.split(' ')[0] == 'Rank')
							values.push({ thumb: '<img src="'+v.thumbnail+'"/>', listname: v.name, gender: v.sex, uid:v.uid, rank: 'Rank: '+v.rank, eig: v.rank_value });
						else
							values.push({ thumb: '<img src="'+v.thumbnail+'"/>', listname: v.name, gender: v.sex, uid:v.uid });
					});
					var userList = new List(k, options, values);
					$('.group-title').mouseenter(function(){
						var group = $(this).attr('group').replace('_',' ');
						$.each(groups, function(i,g){
							if (i != group){
								$.each(g, function(i, v){
									v.material.opacity = 0.3;
									v.sprite.material.opacity = 0.3;
								});
							}
						});
						$.each(lines, function(i,l){
							if ( $.inArray(spheres[l.uid1],groups[group]) == -1 || $.inArray(spheres[l.uid2],groups[group]) == -1)
							{
								l.material.opacity = 0;
							}
						})
					}).mouseleave(function(){
						$.each(spheres, function(i, v){
							v.material.opacity = 0.6;
							v.sprite.material.opacity = 1;
						});
						$.each(lines, function(i,l){
							l.material.opacity = l.default_opacity;
						})
					});
			        $('.items').mouseenter(function(){
			        	var id = $(this).find('.uid').html();
			        	showNameTag(spheres[id], 0);
			        	spheres[id].scale.set( 2, 2, 2 );
			        }).mouseleave(function(){
			        	hideNameTag(0);
			        	var id = $(this).find('.uid').html();
			        	spheres[id].scale.set( 0.5, 0.5, 0.5 );
			        })  
			   	});
			   	if (count == 1)
			        	$('.group-title').addClass('open');
			   	new jQueryCollapse($(".tableview"), {
		          open: function() {
		            this.slideDown(150);
		          },
		          close: function() {
		            this.slideUp(150);
		          }
		        });
			}
					
			function getColor( info )
			{
				var name = info.split(' ')[0];
				var i = parseInt(info.split(' ')[1]);
				var colors = ['ffa6a6', 'a6d0ff', 'b5ffa6', 'fff6a6', 'fca6ff', 'a6fdec', 'fdcda6', 'b99476', 
						'e5fda6', 'eaeaea', 'aebb8c', 'bb8c8c', 'b98cbb', '8c8cbb', '8cbb8f', 'bbb58c'];
				switch ( name )
				{
					case 'All':
						return '919191';
					case 'Me':
						return 'cccccc';
					case 'Friends':
						return 'ffa6a6';
					case 'Male':
						return '91c7fe';
					case 'Female':
						return 'ffa8fc';
					case 'Distance':
						if (i < 16) 
							return colors[i-1]; 
						else
							return '707070';
					case 'Rank':
						if (i == 1) 
							return '7d9cff';
						else if (i == 2)
							return 'b9c9fe';
						else if (i == 3)
							return 'e0e7ff';
						else
							return '707070';
					case 'Group':
						if (i < 16) 
							return colors[i-1]; 
						else
							return '707070';
				}
			}
			Object.size = function(obj) {
			    var size = 0, key;
			    for (key in obj) {
			        if (obj.hasOwnProperty(key)) size++;
			    }
			    return size;
			};

		</script>
		<div class='event_title'>
			<%= image_tag "footerlogo.png", :class => 'title' %> <br /><br />
			NAME: <%= @event['name'] %><br />
			CREATOR: <%= @creator['name'] %><br />
			START: <%= Time.parse(@event['start_time']).strftime "%Y-%m-%d %H:%M:%S %Z" %><br />
			<% if @event['end_time'] %> END: <%= Time.parse(@event['end_time']).strftime "%Y-%m-%d %H:%M:%S %Z" %> <br /> <% end %>
			LOCATION: <%= @event['location'] %>
			
			
		</div>
		<div class='icon-outer-div'>
			<div class='icon-div toggle' id='gender'>
				<%= image_tag "icon-gender.png", :class => 'icon trans', :title => 'Show Genders of Participants' %>
			</div>
			<div class='icon-div toggle' id='distance'>
				<%= image_tag "icon-friends.png", :class => 'icon trans', :title => 'Show My Friends and Distances to Participants' %>
			</div>
			<div class='icon-div toggle' id='rank'>
				<%= image_tag "icon-rank.png", :class => 'icon trans', :title => 'Show Rankings of Participants' %>
			</div>
			<div class='icon-div toggle' id='cluster'>
				<%= image_tag "icon-clusters.png", :class => 'icon trans', :title => 'Show Clusters of Participants' %>
			</div>
			<div class='icon-div' id='help'>
				<%= link_to (image_tag "icon-help.png", :class => 'icon trans', :title => 'Go to Read Help & Documentation'), help_path %>
			</div>
			<div class='icon-div' id='back'>
				<%= link_to (image_tag "icon-back.png", :class => 'icon trans', :title => 'Back to My Events List'), root_path %>
			</div>
			<div class='sub-icon-div' id='sub-rank'>
				<div class='icon-div sub-toggle active' id='eig'>
					<%= image_tag "icon-rank-eig.png", :class => 'icon trans', :title => 'Rank by Influence (Eigenvector Centrality)' %>
				</div>
				<div class='icon-div sub-toggle' id='degree'>
					<%= image_tag "icon-rank-degree.png", :class => 'icon trans', :title => 'Rank by No. of Friends (Degree Centrality)' %>
				</div>
			</div>
			<div class='slider-div' id='sub-cluster'>
				<div class='slide-track' id='slide-track'></div>
				<div class='slide-scale'>
					<div class='scale-dash'>
					</div>
					<div class='scale-dash'>
					</div>
					<div class='scale-dash'>
					</div>
					<div class='scale-dash'>
					</div>
					<div class='scale-dash'>
					</div>
				</div>
			</div>
		</div>
		<div class='detail-div trans'>
			<%= image_tag "DETAILS.png", :class => 'detail-tab' %>
			<div class='tableview'>

			</div>
			
		</div>
		<div class='name_tag'>
			<%= image_tag "logo.png", :class => 'thumbnail' %>
			<span class='name'>Name</span><br />
			<span class='sex'>Sex</span><br />
			<span class='friend'>Not friend</span>
		</div>
		<div><canvas id='my_canvas' width="1330" height="802"></canvas></div>
		
<% end %>

